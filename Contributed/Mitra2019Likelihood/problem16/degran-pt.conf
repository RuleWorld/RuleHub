# Example of using MCMC to generate a Bayesian posterior distribution for each parameter

# Originally published as a fitting job to be run in BioNetFit 1 in:
# Harmon et. al., "Timescale Separation of Positive and Negative Signaling Creates History-Dependent 
# Responses to IgE Receptor Stimulation" Scientific Reports, 2017

# The results of this run are expected to reproduce figure S10 in Harmon et al. 

# A large number of samples is needed to get a good distribution, so we recommend running on a cluster. 

#############
### PATHS ###
#############

# The directory to which job output will be written
output_dir=degranulation_pt_qual
simulation_dir=/tmp

# The BioNetGen executable - taken from system $BNGPATH

# The model file to be used in fitting simulations
model = model0_tofit.bngl: p1_5.prop

#######################
### General Options ###
#######################


# Kill a job and move on without it if it runs over
wall_time_sim=180

# Parallel settings
parallel_count=36

verbosity=1
delete_old_files=2

#######################
### Fitting Options ###
#######################

# The original paper used 30 chains, burn in 20000, run 200000
# We'll parallelize it more and get the same number of samples off of 120 chains

# Each chain runs 50000 iterations.
max_iterations=50000
# Run Parallel tempering
fit_type=pt
# Run 35 chains
population_size=35
# Don't sample from the first 10000 iterations, allowing time to equilibrate
burn_in=10000
# After the burn in, save a sample every 20 iterations. 
sample_every=20
# Every 5000 samples, output histograms showing the current posterior distributions.
output_hist_every=5000
# Each histogram contains 20 bins.
hist_bins=20

# PT-specific settings
# Attempt replica exchange every 10 iterations
exchange_every=10
# With the 30 population members, use 6 members per temperature with the following 5 betas (= 1/temperature)
reps_per_beta=7
beta=1 0.8 0.64 0.512 0.4096

# Save a backup of the algorithm every 50 iterations
backup_every=50
# Use a chi-squared objective function. 
objfunc=chi_sq

# Priors are loguniform. Spanning all orders of magnitude for 1st and 2nd order rates. 
uniform_var=X_tot__FREE	0 20
loguniform_var=k_Xoff__FREE	1e-6 10
loguniform_var=k_Xon__FREE	1e3 1e7
loguniform_var=kase__FREE	1e-6 10
loguniform_var=kdegX__FREE	1e-6 10
loguniform_var=kdegran__FREE	1e3 1e7
loguniform_var=km_Ship1__FREE	1e-6 10
loguniform_var=km_Syk__FREE	1e-6 10
loguniform_var=km_x__FREE	1e-6 10
loguniform_var=koff__FREE	1e-6 10
loguniform_var=kp_Ship1__FREE	1e3 1e7
loguniform_var=kp_Syk__FREE	1e3 1e7
loguniform_var=kp_x__FREE	1e3 1e7
loguniform_var=kpten__FREE	1e-6 10
loguniform_var=ksynth1__FREE	1e-6 10
loguniform_var=pase__FREE	1e-6 10



